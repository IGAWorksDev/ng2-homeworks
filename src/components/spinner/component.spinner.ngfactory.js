import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "./component.spinner";
var styles_WorksSpinner = ["[_nghost-%COMP%] {\n            display: inline-block;\n            vertical-align: middle;\n        }\n   \n        .block[_nghost-%COMP%] {\n            display: block;\n            vertical-align: initial;\n        }"];
var RenderType_WorksSpinner = i0.ɵcrt({ encapsulation: 0, styles: styles_WorksSpinner, data: {} });
export { RenderType_WorksSpinner as RenderType_WorksSpinner };
export function View_WorksSpinner_0(_l) { return i0.ɵvid(0, [i0.ɵqud(402653184, 1, { selectChild: 0 }), (_l()(), i0.ɵted(-1, null, ["\n        "])), (_l()(), i0.ɵeld(2, 0, [[1, 0], ["worksSelect", 1]], null, 10, "select", [], [[1, "id", 0], [1, "name", 0], [1, "title", 0], [1, "readonly", 0], [1, "placeholder", 0], [1, "required", 0], [2, "ng-untouched", null], [2, "ng-touched", null], [2, "ng-pristine", null], [2, "ng-dirty", null], [2, "ng-valid", null], [2, "ng-invalid", null], [2, "ng-pending", null]], [[null, "ngModelChange"], [null, "change"], [null, "blur"]], function (_v, en, $event) { var ad = true; var _co = _v.component; if (("change" === en)) {
        var pd_0 = (i0.ɵnov(_v, 3).onChange($event.target.value) !== false);
        ad = (pd_0 && ad);
    } if (("blur" === en)) {
        var pd_1 = (i0.ɵnov(_v, 3).onTouched() !== false);
        ad = (pd_1 && ad);
    } if (("ngModelChange" === en)) {
        var pd_2 = ((_co.model = $event) !== false);
        ad = (pd_2 && ad);
    } return ad; }, null, null)), i0.ɵdid(3, 16384, null, 0, i1.SelectControlValueAccessor, [i0.Renderer2, i0.ElementRef], null, null), i0.ɵdid(4, 16384, null, 0, i1.RequiredValidator, [], { required: [0, "required"] }, null), i0.ɵprd(1024, null, i1.NG_VALIDATORS, function (p0_0) { return [p0_0]; }, [i1.RequiredValidator]), i0.ɵprd(1024, null, i1.NG_VALUE_ACCESSOR, function (p0_0) { return [p0_0]; }, [i1.SelectControlValueAccessor]), i0.ɵdid(7, 671744, null, 0, i1.NgModel, [[8, null], [2, i1.NG_VALIDATORS], [8, null], [2, i1.NG_VALUE_ACCESSOR]], { isDisabled: [0, "isDisabled"], model: [1, "model"] }, { update: "ngModelChange" }), i0.ɵprd(2048, null, i1.NgControl, null, [i1.NgModel]), i0.ɵdid(9, 16384, null, 0, i1.NgControlStatus, [i1.NgControl], null, null), (_l()(), i0.ɵted(-1, null, ["\n            "])), i0.ɵncd(null, 0), (_l()(), i0.ɵted(-1, null, ["\n        "])), (_l()(), i0.ɵted(-1, null, ["\n    "]))], function (_ck, _v) { var _co = _v.component; var currVal_13 = _co.required; _ck(_v, 4, 0, currVal_13); var currVal_14 = _co.disabled; var currVal_15 = _co.model; _ck(_v, 7, 0, currVal_14, currVal_15); }, function (_ck, _v) { var _co = _v.component; var currVal_0 = _co.id; var currVal_1 = _co.name; var currVal_2 = _co.title; var currVal_3 = _co.readonly; var currVal_4 = _co.placeholder; var currVal_5 = (i0.ɵnov(_v, 4).required ? "" : null); var currVal_6 = i0.ɵnov(_v, 9).ngClassUntouched; var currVal_7 = i0.ɵnov(_v, 9).ngClassTouched; var currVal_8 = i0.ɵnov(_v, 9).ngClassPristine; var currVal_9 = i0.ɵnov(_v, 9).ngClassDirty; var currVal_10 = i0.ɵnov(_v, 9).ngClassValid; var currVal_11 = i0.ɵnov(_v, 9).ngClassInvalid; var currVal_12 = i0.ɵnov(_v, 9).ngClassPending; _ck(_v, 2, 1, [currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6, currVal_7, currVal_8, currVal_9, currVal_10, currVal_11, currVal_12]); }); }
export function View_WorksSpinner_Host_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 2, "works-spinner", [], null, null, null, View_WorksSpinner_0, RenderType_WorksSpinner)), i0.ɵprd(5120, null, i1.NG_VALUE_ACCESSOR, function (p0_0) { return [p0_0]; }, [i2.WorksSpinner]), i0.ɵdid(2, 4308992, null, 0, i2.WorksSpinner, [i0.Renderer, i0.ElementRef], null, null)], function (_ck, _v) { _ck(_v, 2, 0); }, null); }
var WorksSpinnerNgFactory = i0.ɵccf("works-spinner", i2.WorksSpinner, View_WorksSpinner_Host_0, { class: "class", placeholder: "placeholder", block: "block", id: "id", name: "name", title: "title", disabled: "disabled", readonly: "readonly", required: "required", size: "size" }, { onUpdate: "update" }, ["*"]);
export { WorksSpinnerNgFactory as WorksSpinnerNgFactory };
//# sourceMappingURL=component.spinner.ngfactory.js.map